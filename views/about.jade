extend layout

block content
  h3 What is YASP?
  p YASP is a free, open-source stats site that provides replay parsing for Dota 2 matches.  This allows us to present statistics such as ward placement, item build times/usage, and breakdowns of hero damage, kills, and gold/XP.
  p Our goal is to provide in-depth analysis of personal matches.
  
  h3 What does YASP stand for?
  p YASP stands for YASP: Another Stats Page, which makes it a recursive acronym along the lines of GNU and YAML.
  
  h3 How do you make money/keep the site running?
  p YASP is a side project of a group of college students.  As such, we're not looking to make money off the site, although we do run ads to help pay for server costs.
  
  h3 How do I use YASP?
  p Simply sign in through Steam, and we'll start tracking your matches.
  p We're working on allowing users to request parses by match ID.
  
  h3 What do I do if I have a bug/feature request?
  p The best way to submit these is by making an issue on GitHub.  This way the developers are notified immediately and can discuss the issue/request with you.  You could also try Twitter.
  
  h3 Why does it take some time after my match to get it parsed?
  p We can't parse a match until Valve makes it available for download.  After that, we have to download the replay and run it through the parser.  Most matches should be parsed within 15 minutes of completion.
  
  h3 Why are my matches showing up, but don't get parsed?
  p This can be due to Valve simply not making the replay available, which happens occasionally (particularly in the SEA region).  If so, there's nothing we can do about it.  
  p Alternatively, our parser couldn't process the match.  In this case, we're always looking for bugs and re-parsing matches when we can.  We're usually able to parse over 95% of games.
  
  h3 I signed in a while ago and just came back, why haven't my matches been tracked?
  p To keep the load reasonable, we stop tracking players' matches after a period of inactivity.  Each visit to the YASP site while signed in through Steam resets this period.
  
  h3 Why don't you have my old matches?
  p YASP only starts tracking your matches from when you signed in.  We will get full match histories for contributors and veteran YASP users.
  
  h3 Why am I still missing some matches after getting my full history?
  p The Valve API limits results to a maximum of 500.  We can get 500 games per hero per player, but if you have more than 500 games on a hero, we won't be able to get the rest.  Sorry.
  
  h3 Why do a lot of players in my matches only show up as numbers?
  p To save API calls, we don't get player display names immediately after matches are added.  We'll occasionally go through and get player names.  The number displayed is their 32-bit Steam account ID.
  
  h3 Why can't you parse uploaded private lobby replays?
  p To generate the information for a match page, we combine the parsed data with data from the Valve API.  Since private matches can't be accessed through the API, we can't parse these replays.

  h3 Why is there a difference between my parsed stats and what actually happened in the game?
  p Replay parsing is not an exact art.  Often, assumptions have to be made, and sometimes data is just inconsistent/unavailable.  If you find an issue, please report it!
  
  h3 Can I use YASP in my own project?
  p YASP is licensed under the GNU GPLv3.  This means you are free to use YASP in your project, if your project is also licensed the same way (free and open source).  We also ask that you give us attribution in your project if you use our code.
  
  h3 How do I contribute to YASP?
  p YASP is open source!  Pull requests are always welcome if you want to work on/improve a feature.  If you'd rather contribute in other ways, feel free to click on an ad that interests you.
  
  h3 What is YASP built with?
  p YASP's main site and replay retriever are built with Node.js.  We use MongoDB to store our data and Redis/Kue to manage our job queue.
  p On the client side we use libraries including c3, cal-heatmap, and DataTables.  
  p The parser is written in Java, using the clarity replay parsing library.
  p The original project code was based on matchurls.
