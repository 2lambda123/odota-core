extend /layout
include /mixins/progress_bar

block content
  .row.match-top
    .col-md-4
      div
        h4
          if player.profile.avatar
            span
              a(href=player.profile.profileurl || "#", target="_blank")
                img(style="display:inline-block; margin-right:5px;" src='#{player.profile.avatar}').img-thumbnail
          span(style="word-wrap:break-word;") #{player.profile.name || player.profile.personaname || player.profile.account_id}
          if player.profile.loccountrycode && constants.countries[player.profile.loccountrycode]
            span: abbr(title=constants.countries[player.profile.loccountrycode].name.common): span.flag-icon(style="margin:5px;" class="flag-icon-"+player.profile.loccountrycode.toLowerCase())
          if player.profile.last_login
            span: img.user(src=constants.ICON_PATH, title="This user is registered!")
          div(style="margin-top:1%;")
            i.flaticon-1.small-cheese(style="display:inline-block")
            small(style="margin-left:.5em") x #{' '} #{player.profile.cheese || 0}
    .col-md-3
      h4
            span.text-info.rating
              span: abbr(title="Solo MMR")
                i.fa.fa-fw.fa-user
              small(style="margin-left:.5em") #{player.solo_competitive_rank || "N/A"}
            //-
              span.text-info.rating
                span: abbr(title="Highest Solo MMR")
                  i.fa.fa-fw.fa-star
                small(style="margin-left:.5em") #{Math.max(Math.max.apply(null, player.ratings.map(function(r){return r.solo_competitive_rank;})),0) || "N/A"}

            span.text-warning.rating
              span: abbr(title="Party MMR")
                i.fa.fa-fw.fa-users
              small(style="margin-left:.5em") #{player.competitive_rank || "N/A"}
            //-
              span.text-warning.rating
                span: abbr(title="Highest Party MMR")
                  i.fa.fa-fw.fa-star
                small(style="margin-left:.5em") #{Math.max(Math.max.apply(null, player.ratings.map(function(r){return r.competitive_rank;})),0) || "N/A"}

            span.rating
              span: abbr(title="MMR estimate based on data from peer players. This is the mean visible MMR of the recent matches played by this user.")
                i.fa.fa-fw.fa-question-circle
              small#estimate(style="margin-left:.5em;display:inline-block;")
                if player.mmr_estimate && player.mmr_estimate.estimate && player.mmr_estimate.stdDev
                  span: abbr(title="Standard deviation: " + player.mmr_estimate.stdDev.toFixed(2) + "<br>Matches: " + player.mmr_estimate.n) #{player.mmr_estimate.estimate}
                else
                  ="N/A"
    .col-md-3
      h4
        span.text-primary
          //i.fa.fa-trophy
          small(style="margin-left:.5em;margin-right:.5em;")
            span.text-success(style="margin:0 4px;") #{(player.win)}
            span -
            span.text-danger(style="margin:0 4px;") #{player.lose}
            if (player.win+player.lose)
              span (#{(player.win/(player.win+player.lose)*100).toFixed(2)}%)
          abbr(title="Refresh Match History: If this player has recently changed their match privacy setting, this will queue a scan to find the missing matches.")
            button.btn.btn-sm.btn-default(id="refreshButton" onClick="refreshMatchHistory()")
              i.fa.fa-refresh
    .col-md-2
      h4
        span
          a(href="#{'https://dotacoach.org/Hire/Yasp?matchID=' + Math.max(Math.max.apply(null, player.matches.map(function(m){return m.match_id;})),-1) + '&userSteamId=' + (user ? user.account_id : '') + '&playerSteamId=' + player.profile.account_id + '&playerMmr=' + Math.max(player.solo_competitive_rank || -1, player.competitive_rank || -1)}", class="btn btn-sm btn-default")
            img(src='/public/images/dotacoach-32x24.png', style="margin: -2px; padding-right: 4px;")
            | Ask a Coach

  .row.player-tabs(style="margin-top:1em;")
    .col-md-12.table-responsive
      ul.nav.nav-tabs
        each val, key in tabs
          if !val.hide || config.NODE_ENV === "development"
            li(class= (route === key ? 'active' : ''))
              a(href="/players/#{player.profile.account_id}/" + (key === 'index' ? "" : key) + querystring, class=(val["new-feature"] ? "new-feature" : ""))= val.name
  include /query
  block playercontent

append footer_assets
  script.
    function refreshMatchHistory(){
      fetch('/api/players/#{player.profile.account_id}/refresh', {method: 'POST'});
      document.getElementById('refreshButton').style.display = 'none';
    }
    
    $('#matches').dataTable({
        "order": [],
        info: false,
        paging: false,
        pageLength: 20,
        lengthChange: false,
        searching: false,
        responsive: true,
        columnDefs: [
            {
                targets: "skill",
                render: function(data, type) {
                    var skillIDs = {
                        1: "Normal",
                        2: "High",
                        3: "Very High",
                    };

                    if (type === "display") {
                        return (data in skillIDs ? skillIDs[data] : data);
                    }

                    return data;
                }
            },
            {
                "targets": "fromNow",
                render: function(data, type) {
                    if (type === "display") {
                        return moment(data, 'X').fromNow();
                        //return moment.unix(data).fromNow();
                    }
                    return data;
                }
            },
            {
                "targets": "seconds",
                render: function(data, type) {
                    if (type === "display") {
                        return formatSeconds(data);
                    }
                    return data;
                }
            }
            ]
    });

    $('#heroes').dataTable({
        info: false,
        "paging": false,
        "searching": false,
        "order": [
        ],
        "drawCallback":function(){
            tooltips();
        },
        "columnDefs": [{
            targets: "fromNow",
            render: function(data, type) {
                if (type === "display") {
                    if (!Number(data)){
                        return "never";
                    }
                    return moment(data, 'X').fromNow();
                }
                return data;
            }
        }]
    });

    $('#teammates').dataTable({
        info: false,
        "paging": false,
        "searching": false,
        "order": [
            [2, "desc"]
        ],
        "drawCallback":function(){
            window.tooltips();
        },
        "columnDefs": [{
            targets: "fromNow",
            render: function(data, type) {
                if (type === "display") {
                    if (!Number(data)){
                        return "never";
                    }
                    return moment.unix(data).fromNow();
                }
                return data;
            }
        }]
    });
    
    var builds = $('#builds').dataTable({
        "searching": false,
        "paging": false,
        "order": [
            [1, "desc"]
        ],
        "drawCallback": function() {
            window.tooltips();
        },
        "columnDefs": [{
            targets: "seconds",
            render: function(data, type) {
                if (type === "display") {
                    return formatSeconds(data);
                }
                return data;
            }
        }]
    });
    
    var accuracy = $('#accuracy').dataTable({
        "searching": false,
        "paging": false,
        "order": [
            [1, "desc"]
        ],
        "drawCallback": function() {
            window.tooltips();
        },
        "columnDefs": []
    });
